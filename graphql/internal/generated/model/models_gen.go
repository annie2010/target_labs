// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents an author
type Author struct {
	// Represents an author unique identifier
	ID string `json:"id"`
	// The author first name
	First string `json:"first"`
	// The author last name
	Last string `json:"last"`
}

// Represents a book
type Book struct {
	// Represents book isbn number
	ID string `json:"id"`
	// The title of the book
	Title string `json:"title"`
	// The book category
	Category BookCategory `json:"category"`
	// The book authors
	Authors []Author `json:"authors"`
}

type AuthorInput struct {
	ID    string `json:"id"`
	First string `json:"first"`
	Last  string `json:"last"`
}

// Represents Book Categories
type BookCategory string

const (
	BookCategoryRomance BookCategory = "ROMANCE"
	BookCategoryDrama   BookCategory = "DRAMA"
	BookCategoryFiction BookCategory = "FICTION"
)

var AllBookCategory = []BookCategory{
	BookCategoryRomance,
	BookCategoryDrama,
	BookCategoryFiction,
}

func (e BookCategory) IsValid() bool {
	switch e {
	case BookCategoryRomance, BookCategoryDrama, BookCategoryFiction:
		return true
	}
	return false
}

func (e BookCategory) String() string {
	return string(e)
}

func (e *BookCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookCategory", str)
	}
	return nil
}

func (e BookCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

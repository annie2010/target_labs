"Represents Book Categories"
enum BookCategory {
  <<!!YOUR_CODE!!>> -- Define romance, drama, fiction enumerables
}

"Represents a book"
type Book {
  <<!!YOUR_CODE!!>> -- Book as an id(ISBN), title, category(enum), authors
}

"Represents an author"
type Author {
  <<!!YOUR_CODE!!>> -- Author a an id(IBAN), first and last names
}

"Barnes & Noble schema definition"
schema {
  "Supported queries"
  query: Query

  "Supported mutations"
  mutation: Mutation
}

"Barnes and Noble GraphQL Queries"
type Query {
  <<!!YOUR_CODE!!>> -- define your queries: allBooks, allAuthors, booksByAuthor
}

"Barnes and Noble GraphQL Mutations"
type Mutation {
  <<!!YOUR_CODE!!>> -- define your mutations
  <<!!YOUR_CODE!!>> -- createAuthor: must take an input form with first and last
  <<!!YOUR_CODE!!>> -- deleteAuthor: must take an ISAN
  <<!!YOUR_CODE!!>> -- deleteBook: must take an ISBN
  <<!!YOUR_CODE!!>> -- deleteBooksByAuthor: delete all books given an author ISAN
}

<<!!YOUR_CODE!!>> -- Define your input forms for your mutations
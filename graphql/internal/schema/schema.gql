"Represents Book Categories"
enum BookCategory {
  ROMANCE
  DRAMA
  FICTION
}

"Represents a book"
type Book {
  "Represents book isbn number"
  id: ID!
  "The title of the book"
  title: String!
  "The book category"
  category: BookCategory!
  "The book authors"
  authors: [Author!]!
}

"Represents an author"
type Author {
  "Represents an author unique identifier"
  id: ID!
  "The author first name"
  first: String!
  "The author last name"
  last: String!
}

schema {
  query: Query
  mutation: Mutation
}

"Barnes and Noble GraphQL APIs"
type Query {
  "Fetch all available books"
  allBooks: [Book!]!

  "Fetch all available authors"
  allAuthors: [Author!]!

  "Fetch books from a given *author*"
  booksByAuthor(id: ID!): [Book!]
}

type Mutation {
  "Add a new author"
  createAuthor(input: authorInput!): Author

  "Delete an author by isan"
  deleteAuthor(id: ID!): Author

  "Delete a book by isbn"
  deleteBook(id: ID!): Book

  "Delete all books by a given author"
  deleteBooksByAuthor(id: ID!): [Book!]
}

input authorInput {
  id: ID!
  first: String!
  last: String!
}